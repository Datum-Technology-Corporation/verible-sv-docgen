#!/usr/bin/env python3
# Copyright (c) 2020 Antmicro <https://www.antmicro.com>

import argparse
import os
import shlex
import tempfile
import sys
from pathlib import Path

from fusesoc.coremanager import CoreManager, DependencyError
from fusesoc.config import Config
from fusesoc.librarymanager import Library
from fusesoc.vlnv import Vlnv


def get_core_deps(core: str):
    files = []
    incdirs = []

    cm = CoreManager(Config())
    cm.add_library(Library(".", "."))

    try:
        cores = cm.get_depends(Vlnv(core), flags={})
    except DependencyError as e:
        print(f"Dependency error: {e}. Possible reason: the core name has been changed in Ibex.", file=sys.stderr)
        print("Available cores:", file=sys.stderr)
        for core in cm.get_cores():
            print(f"- {core}", file=sys.stderr)
        raise

    for core in cores:
        core.setup()
        root = core.files_root
        for fs in core.filesets.values():
            for f in fs.files:
                if f.is_include_file:
                    dirname = str(Path(root, f.name).parent)
                    if dirname not in incdirs:
                        incdirs.append(str(dirname))
                elif f.file_type == "systemVerilogSource":
                    files.append(str(Path(root, f.name)))

    return (files, incdirs)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("core", type=str)
    args = parser.parse_args()

    filepaths, incdirs = get_core_deps(args.core)
    if len(filepaths) == 0:
        raise ValueError("File list is empty.")

    filelist = tempfile.NamedTemporaryFile(mode="w", delete=False, dir=os.getcwd(), prefix="file_list.", suffix=".txt")
    for fp in filepaths:
        print(fp, file=filelist)

    incdirs = ",".join(incdirs)

    print(f"--include_dir_paths {shlex.quote(incdirs)} --file_list_path {shlex.quote(filelist.name)}")
    filelist.close()

    return 0


if __name__ == "__main__":
    try:
        sys.exit(main())
    except Exception:
        import traceback

        print("\n\033[1;94m*** EXCEPTION ***\033[0m\n", file=sys.stderr)
        traceback.print_exc()

        print("\n\033[1;94m*** ENVIRONMENT ***\033[0m\n", file=sys.stderr)
        print(
            f"Cmd:  {repr(sys.argv)}",
            f"CWD:  {repr(os.getcwd())}",
            f"PATH: {repr(os.environ['PATH'].split(':'))}",
            sep="\n", file=sys.stderr
        )
        sys.exit(255)
